@page "/rents"
@using StreamingAccounts.WEB.Auth;
@using StreamingAccounts.Shared.Entities;
@using StreamingAccounts.WEB.Repositories;
@using CurrieTechnologies.Razor.SweetAlert2;
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@inject ILoginService iloginService

@inject IRepository repository

@if (Rents is null)
{
    <div class="spinner" />
}
else
{


<GenericList MyList="Rents">

    <Body>
        <AuthorizeView Roles="User">
             <Authorized>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Cuentas activas
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar cuentas activas..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>

                    <Pagination CurrentPage="currentPage"
                                TotalPages="totalPages"
                                SelectedPage="SelectedPage" />



                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Usuario</th>
                                <th>Producto</th>
                                <th>Fecha Inicio</th>
                                <th>Fecha finalizacion</th>
                                <th>Estado</th>
                                <th style="width:220px">Opciones</th>
                                <th style="width:280px"></th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var rent in Rents!)
                            {
                                        @if (@context.User.Identity?.Name == rent.User.Email)
                                        {
                                            <tr>
                                                <td>
                                                    @rent.User.FullName
                                                </td>
                                                <td>
                                                    @rent.Product.Name
                                                </td>
                                                <td>
                                                    @rent.dateInit
                                                </td>
                                                <td>
                                                    @rent.dateFinish
                                                </td>
                                                <td>
                                                    @rent.State
                                                </td>
                                                <td>
                                                    <a href="/rents/edit/@rent.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                                    <button class="btn btn-danger btn-sm" @onclick=@(() => Delete(rent))><i class="oi oi-trash" /> Borrar</button>
                                                </td>

                                            </tr>
                                        }

                                }
                        </tbody>
                    </table>

                </div>
            </div>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView Roles="Admin">
                <Authorized>
                    <div class="card">
                        <div class="card-header">
                            <span>
                                <i class="oi oi-globe"></i> Cuentas activas
                            </span>
                        </div>
                        <div class="card-body">
                            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                                <div>
                                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar cuentas activas..." @bind-value="Filter" />
                                </div>
                                <div class="mx-1">
                                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                                </div>
                            </div>

                            <Pagination CurrentPage="currentPage"
                                        TotalPages="totalPages"
                                        SelectedPage="SelectedPage" />



                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Usuario</th>
                                        <th>Producto</th>
                                        <th>Fecha Inicio</th>
                                        <th>Fecha finalizacion</th>
                                        <th>Estado</th>
                                        <th style="width:220px">Opciones</th>
                                        <th style="width:280px"></th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var rent in Rents!)
                                    {
                                        <tr>
                                            <td>
                                                @rent.User.FullName
                                            </td>
                                            <td>
                                                @rent.Product.Name
                                            </td>
                                            <td>
                                                @rent.dateInit
                                            </td>
                                            <td>
                                                @rent.dateFinish
                                            </td>
                                            <td>
                                                @rent.State
                                            </td>
                                            <td>
                                                <a href="/rents/edit/@rent.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                                <button class="btn btn-danger btn-sm" @onclick=@(() => Delete(rent))><i class="oi oi-trash" /> Borrar</button>
                                            </td>

                                        </tr>

                                    }
                                </tbody>
                            </table>

                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>
    </Body>

</GenericList>
}

@code {
    public List<ProductRent>? Rents { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await Load(page);
    }

    private async Task Load(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/rents/full";
        }
        else
        {
            url1 = $"api/rents?page={page}&filter={Filter}";
        }


        try
        {
            var responseHppt = await repository.Get<List<ProductRent>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Rents = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await swal.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }


    }

    private async Task Delete(ProductRent rent)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/rents/{rent.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await Load(page);
        await SelectedPage(page);
    }


}

       

